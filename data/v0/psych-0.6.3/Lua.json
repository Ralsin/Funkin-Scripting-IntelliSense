{
    "events": {
        "onCreate": {
            "desc": "Called once the script was initialized."
        },
        "onCreatePost": {
            "desc": "Called once the game has finished loading."
        },
        "onDestroy": {
            "desc": "Called once the script is destroyed."
        },
        "onBeatHit": {
            "desc": "Called every beat, use `curBeat` to get the current beat."
        },
        "onStepHit": {
            "desc": "Called every step, use `curStep` to get the current step."
        },
        "onSectionHit": {
            "desc": "Called every section, use `curSection` to get the section index."
        },
        "onUpdate": {
            "desc": "Called every frame before any logic updates.  \n`elapsed` - the time between frames in seconds.",
            "args": {
                "elapsed": "number"
            }
        },
        "onUpdatePost": {
            "desc": "Called every frame after all logic updated.  \n`elapsed` - the time between frames in seconds.",
            "args": {
                "elapsed": "number"
            }
        },
        "onUpdateScore": {
            "desc": "Triggered every time score text updates.",
            "args": {
                "missed": "boolean"
            }
        },
        "onSongStart": {
            "desc": "Triggered once the song starts playing."
        },
        "onEndSong": {
            "desc": "Triggered once the song ends."
        },
        "onMoveCamera": {
            "desc": "Called whenever camera tries to change focus.  \n`focus` - character it focuses on, can be either `boyfriend`, `dad` or `gf`.",
            "args": {
                "focus": "string"
            }
        },
        "onRecalculateRating": {
            "desc": "Called right before the rating calculation.  \n`return Function_Stop` prevents it from being calculated."
        },
        "onEvent": {
            "desc": "Fires every event hit.",
            "args": {
                "eventName": "string",
                "value1": "string",
                "value2": "string"
            }
        },
        "onStartCountdown": {
            "desc": "Triggered before the countdown starts."
        },
        "onCountdownStarted": {
            "desc": "Triggered after the countdown started."
        },
        "onCountdownTick": {
            "desc": "Fires every countdown tick.  \n`counter` - number value between 0 and 4.  \n` 0 ` - \"Three\". ` 1 ` - \"Two / Ready?\".  \n` 2 ` - \"One / Set\". ` 3 ` - \"Three / GO!\".  \n` 4 ` - Song started.",
            "args": {
                "counter": "number"
            }
        },
        "onNextDialogue": {
            "desc": "Triggered when the next dialogue is called.",
            "args": {
                "dialogueCount": "number"
            }
        },
        "onSkipDialogue": {
            "desc": "Triggered when the dialogue is skipped mid text.",
            "args": {
                "dialogueCount": "number"
            }
        },
        "onPause": {
            "desc": "Called when the gameplay pauses."
        },
        "onResume": {
            "desc": "Called when the gameplay resumes."
        },
        "onGameOver": {
            "desc": "Triggered before Game Over initialized.  \n`return Function_Stop` can be used to prevent it."
        },
        "onGameOverStart": {
            "desc": "Triggered after Game Over screen was created."
        },
        "onGameOverConfirm": {
            "desc": "Triggered if player decides to retry or return to the menu.",
            "args": {
                "retry": "boolean"
            }
        },
        "onCustomSubstateCreate": {
            "desc": "Same as onCreate() but for substates.  \n`name` - the name that was given to the substate using `openCustomSubstate(name)`.",
            "args": {
                "name": "string"
            }
        },
        "onCustomSubstateCreatePost": {
            "desc": "Same as onCustomSubstateCreate.",
            "args": {
                "name": "string"
            }
        },
        "onCustomSubstateUpdate": {
            "desc": "Same as onUpdate() but for substates.  \n`name` - the substate name.  \n`elapsed` - the time between frames in seconds.",
            "args": {
                "name": "string",
                "elapsed": "number"
            }
        },
        "onCustomSubstateUpdatePost": {
            "desc": "Same as onCustomSubstateUpdate.",
            "args": {
                "name": "string",
                "elapsed": "number"
            }
        },
        "onCustomSubstateDestroy": {
            "desc": "Triggered when substate closes.  \n`name` - the name of the substate that is being closed.",
            "args": {
                "name": "string"
            }
        },
        "goodNoteHit": {
            "desc": "Called when player hits a note.  \n`index` - the note's id in unspawnNotes group.  \n`noteDir` - 0: left, 1: down, 2: up, 3: right.  \n`noteType` - type of the custom note.  \n`isSustainNote` - true if it's a note's tail part.",
            "args": {
                "index": "number",
                "noteDir": "number",
                "noteType": "string",
                "isSustainNote": "boolean"
            }
        },
        "opponentNoteHit": {
            "desc": "Called when opponent hits a note.  \n`index` - the note's id.  \n`noteDir` - 0: left, 1: down, 2: up, 3: right.  \n`noteType` - type of the custom note.  \n`isSustainNote` - true if it's a note's tail part.",
            "args": {
                "index": "number",
                "noteDir": "number",
                "noteType": "string",
                "isSustainNote": "boolean"
            }
        },
        "onSpawnNote": {
            "desc": "Called when a note is spawned.  \n`index` - the note's id.  \n`noteDir` - 0: left, 1: down, 2: up, 3: right.  \n`noteType` - type of the custom note.  \n`isSustainNote` - true if it's a note's tail part.",
            "args": {
                "index": "number",
                "noteDir": "number",
                "noteType": "string",
                "isSustainNote": "boolean"
            }
        },
        "noteMiss": {
            "desc": "Called when player misses a note.  \n`index` - the note's id.  \n`noteDir` - 0: left, 1: down, 2: up, 3: right.  \n`noteType` - type of the custom note.  \n`isSustainNote` - true if it was a note's tail part.",
            "args": {
                "index": "number",
                "noteDir": "number",
                "noteType": "string",
                "isSustainNote": "boolean"
            }
        },
        "noteMissPress": {
            "desc": "Called when player misses by tapping while ghost tapping is off.  \n`noteDir` - 0: left, 1: down, 2: up, 3: right.",
            "args": {
                "noteDir": "number"
            }
        },
        "onKeyPress": {
            "desc": "Called when player hits a key.  \n`key` - corresponds to the note's direction,  \n0: left, 1: down, 2: up, 3: right.",
            "args": {
                "key": "number"
            }
        },
        "onKeyRelease": {
            "desc": "Called when player releases a key.  \n`key` - corresponds to the note's direction,  \n0: left, 1: down, 2: up, 3: right.",
            "args": {
                "key": "number"
            }
        },
        "onGhostTap": {
            "desc": "Called when player ghost-taps a key.  \n`key` - corresponds to the note's direction,  \n0: left, 1: down, 2: up, 3: right.",
            "args": {
                "key": "number"
            }
        },
        "onTimerCompleted": {
            "desc": "Triggered on timer completion.  \n`tag` - the tag that was given to the timer.  \n`loops` - the amount of loops it have went through.  \n`loopsLeft` - the amount of loops left.",
            "args": {
                "tag": "string",
                "loops": "string",
                "loopsLeft": "string"
            }
        },
        "onTweenCompleted": {
            "desc": "Triggered once any tween completes.  \n`tag` - the tag that was given to the tween.",
            "args": {
                "tag": "string"
            }
        },
        "onSoundFinished": {
            "desc": "Triggered once any sound finishes.  \n`tag` - the tag that was given to the sound.",
            "args": {
                "tag": "string"
            }
        }
    },
    "variables": {
        "defaultPlayerStrumX0": {
            "returns": "number",
            "desc": "Default horizontal position of the player's left note."
        },
        "defaultPlayerStrumX1": {
            "returns": "number",
            "desc": "Default horizontal position of the player's down note."
        },
        "defaultPlayerStrumX2": {
            "returns": "number",
            "desc": "Default horizontal position of the player's up note."
        },
        "defaultPlayerStrumX3": {
            "returns": "number",
            "desc": "Default horizontal position of the player's right note."
        },
        "defaultPlayerStrumY0": {
            "returns": "number",
            "desc": "Default vertical position of the player's left note."
        },
        "defaultPlayerStrumY1": {
            "returns": "number",
            "desc": "Default vertical position of the player's down note."
        },
        "defaultPlayerStrumY2": {
            "returns": "number",
            "desc": "Default vertical position of the player's up note."
        },
        "defaultPlayerStrumY3": {
            "returns": "number",
            "desc": "Default vertical position of the player's right note."
        },
        "defaultOpponentStrumX0": {
            "returns": "number",
            "desc": "Default horizontal position of the opponent's left note."
        },
        "defaultOpponentStrumX1": {
            "returns": "number",
            "desc": "Default horizontal position of the opponent's down note."
        },
        "defaultOpponentStrumX2": {
            "returns": "number",
            "desc": "Default horizontal position of the opponent's up note."
        },
        "defaultOpponentStrumX3": {
            "returns": "number",
            "desc": "Default horizontal position of the opponent's right note."
        },
        "defaultOpponentStrumY0": {
            "returns": "number",
            "desc": "Default vertical position of the opponent's left note."
        },
        "defaultOpponentStrumY1": {
            "returns": "number",
            "desc": "Default vertical position of the opponent's down note."
        },
        "defaultOpponentStrumY2": {
            "returns": "number",
            "desc": "Default vertical position of the opponent's up note."
        },
        "defaultOpponentStrumY3": {
            "returns": "number",
            "desc": "Default vertical position of the opponent's right note."
        },
        "startedCountdown": {
            "returns": "boolean"
        },
        "songLength": {
            "returns": "number",
            "desc": "Song's length."
        },
        "playbackRate": {
            "returns": "number",
            "desc": "The current playback speed of the song."
        }
    },
    "functions": {
        "addAnimation": {
            "desc": "Adds an animation to the object using indexes.  \n`tag` - animated sprite to add animation to.  \n`name` - animation name.  \n`frames` - table of indexes for animation (ex: `{1, 2, 3, 4, 5}`).  \n`loop` - whether to loop the animation or not.",
            "args": {
                "tag": "string",
                "name": "string",
                "frames": "{number}",
                "framerate": "number = 24",
                "loop": "bool = true"
            }
        },
        "addAnimationByIndices": {
            "desc": "Adds an animation to the object using animation prefix and indexes.  \n`tag` - animated sprite to add animation to.  \n`name` - animation name.  \n`indices` - string of indices for animation (ex: `\"1, 2, 3, 4, 5\"`).  \n\nTo add looping animation instead, use `addAnimationByIndicesLoop` function.",
            "args": {
                "tag": "string",
                "name": "string",
                "prefix": "string",
                "indices": "string",
                "framerate": "number = 24"
            }
        },
        "addAnimationByIndicesLoop": {
            "desc": "Adds a looped animation to the object using animation prefix and indexes.  \n`tag` - animated sprite to add animation to.  \n`name` - animation name.  \n`indices` - string of indices for animation (ex: `\"1, 2, 3, 4, 5\"`).  \n\nTo add non-looping animation instead, use `addAnimationByIndices` function.",
            "args": {
                "tag": "string",
                "name": "string",
                "prefix": "string",
                "indices": "string",
                "framerate": "number = 24"
            }
        },
        "addAnimationByPrefix": {
            "desc": "Adds an animation to the object using animation prefix.  \n`tag` - animated sprite to add animation to.  \n`name` - animation name.  \n`prefix` - animation prefix in the `.xml` file. `loop` - whether to loop the animation or not.",
            "args": {
                "tag": "string",
                "name": "string",
                "prefix": "string",
                "framerate": "number = 24",
                "loop": "boolean = true"
            }
        },
        "addCharacterToList": {
            "desc": "Preloads the character.  \n`name` - the name of the character's .json file.  \n`type` - type of the character, can be `dad` or `gf`, defaults to boyfriend.",
            "args": {
                "name": "string",
                "type": "string"
            }
        },
        "addHaxeLibrary": {
            "desc": "Adds haxe library to hscript (`runHaxeCode` function).  \n`libName` - name of the haxe library.  \n`libPackage` - path to the haxe package.",
            "args": {
                "libName": "string",
                "?libPackage": "string = ''"
            },
            "example": "addHaxeLibrary('StringTools')  \naddHaxeLibrary('Lib', 'openfl')"
        },
        "addHealth": {
            "desc": "Adds `value` to health.  \nKeep in mind that health ranges from 0 to 2, 1 being half of the health bar.",
            "args": {
                "value": "number"
            }
        },
        "addHits": {
            "desc": "Adds hits and recalculates the rating.",
            "args": {
                "value": "string"
            }
        },
        "addLuaScript": {
            "desc": "Adds a lua script to the execution queue.  \n`luaFile` - path to the lua file starting from the `mods/` folder.",
            "args": {
                "luaFile": "string",
                "?ignoreAlreadyRunning": "boolean = false"
            }
        },
        "addLuaSprite": {
            "desc": "Adds lua sprite to the scene.  \n`tag` - name of the sprite.  \n`front` - whether to add it in front of characters or behind.",
            "args": {
                "tag": "string",
                "?front": "boolean = false"
            }
        },
        "addLuaText": {
            "desc": "Adds text to the scene.  \n`tag` - name of the text object.",
            "args": {
                "tag": "string"
            }
        },
        "addMisses": {
            "desc": "Adds misses and recalculates the rating.",
            "args": {
                "value": "number"
            }
        },
        "addOffset": {
            "desc": "Adds offset to the sprite's animation. `tag` - the sprite's name to add offset to.",
            "args": {
                "tag": "string",
                "anim": "string",
                "x": "number",
                "y": "number"
            }
        },
        "addScore": {
            "desc": "Adds score and recalculates the rating.",
            "args": {
                "value": "string"
            }
        },
        "anyGamepadJustPressed": {
            "desc": "Checks if the gamepad's button just got pressed.",
            "args": {
                "button": "string"
            },
            "returns": "boolean"
        },
        "anyGamepadPressed": {
            "desc": "Checks if the gamepad's button is held.",
            "args": {
                "button": "string"
            },
            "returns": "boolean"
        },
        "anyGamepadReleased": {
            "desc": "Checks if the gamepad's button just got released.",
            "args": {
                "button": "string"
            },
            "returns": "boolean"
        },
        "callOnLuas": {
            "desc": "Calls an event in every lua script.",
            "args": {
                "funcName": "string",
                "?args": "{any}",
                "ignoreStops": "boolean = false",
                "ignoreSelf": "boolean = true",
                "?exclusions": "{string}"
            }
        },
        "callScript": {
            "desc": "Calls an event in a specified lua script.",
            "args": {
                "luaFile": "string",
                "funcName": "string",
                "?args": "{any}"
            }
        },
        "cameraFlash": {
            "desc": "Flashes the camera with the specified color.  \n`camera` - the camera to flash, either `game`, `hud` or `other`.  \n`color` - the hex color value formatted as `0xAARRGGBB` or `RRGGBB`.  \n`duration` - the time it takes for flash to fade out.  \n`forced` - whether to reset the flash and start over or skip if it's still active.",
            "args": {
                "camera": "string",
                "color": "string",
                "duration": "number",
                "forced": "boolean"
            }
        },
        "cameraFade": {
            "desc": "Fills the camera with the specified color.  \n`camera` - the camera to fill, either `game`, `hud` or `other`.  \n`color` - the hex color value formatted as `0xAARRGGBB` or `RRGGBB`.  \n`duration` - the time it takes to fade in.  \n`forced` - whether to reset the filling and start over or skip if it's still active.",
            "args": {
                "camera": "string",
                "color": "string",
                "duration": "number",
                "forced": "boolean"
            }
        },
        "cameraShake": {
            "desc": "Shakes the camera.  \n`camera` - the camera to shake. Can be either `game`, `hud` or `other`.  \n`intensity` - how much the camera shakes.  \n`duration` - how much the shake should last.",
            "args": {
                "camera": "string",
                "intensity": "number",
                "duration": "number"
            },
            "example": "cameraShake('game', 0.005, 0.1)"
        },
        "cancelTimer": {
            "desc": "Cancels the timer.  \n`tag` - name of the timer to cancel.",
            "args": {
                "tag": "string"
            }
        },
        "cancelTween": {
            "desc": "Cancels the tween.  \n`tag` - name of the tween to cancel.",
            "args": {
                "tag": "string"
            }
        },
        "changePresence": {
            "desc": "Changes Discord Presence.  \n**Requires some Discord RPC knowledge.**  \n**Do not overuse, otherwise you can get rate limited in Discord.**",
            "args": {
                "details": "string",
                "?state": "string",
                "?smallImageKey": "string",
                "?hasStartTimestamp": "boolean",
                "?endTimestamp": "number"
            }
        },
        "characterDance": {
            "desc": "Plays the character's idle animation.  \n`character` - can be either `dad` or `gf`, defaults to boyfriend.",
            "args": {
                "character": "string"
            }
        },
        "checkFileExists": {
            "desc": "Checks if the file or path exists.  \n`absolute` - whether to start from the root directory or the `mods/` folder.",
            "args": {
                "path": "string",
                "?absolute": "boolean"
            },
            "returns": "boolean"
        },
        "close": {
            "desc": "Turns off the script.",
            "returns": "boolean"
        },
        "closeCustomSubstate": {
            "desc": "Closes the current substate.",
            "returns": "boolean"
        },
        "debugPrint": {
            "desc": "Prints the text on the screen.  \nSupports up to 5 args.  \nBe aware that it combines all args into one, without adding space between them.",
            "args": {
                "text": "string"
            }
        },
        "deleteFile": {
            "desc": "Deletes file from the specified path.",
            "args": {
                "path": "string",
                "ignoreMods": "string"
            },
            "returns": "boolean"
        },
        "directoryFileList": {
            "desc": "Lists the files in the specified directory.",
            "args": {
                "path": "string"
            },
            "returns": "{string}"
        },
        "doTweenAlpha": {
            "desc": "Tweens object's alpha.  \n`tag` - name of the tween.  \n`variable` - object to tween.",
            "args": {
                "tag": "string",
                "variable": "string",
                "value": "number",
                "duration": "number",
                "easing": "string"
            },
            "example": "doTweenAlpha('bfAlpha', 'boyfriend', 0.5, 3, 'linear')"
        },
        "doTweenAngle": {
            "desc": "Tweens object's angle.  \n`tag` - name of the tween.  \n`variable` - object to tween.",
            "args": {
                "tag": "string",
                "variable": "string",
                "value": "number",
                "duration": "number",
                "easing": "string"
            },
            "example": "doTweenAlpha('bfAlpha', 'boyfriend', 0.5, 3, 'linear')"
        },
        "doTweenColor": {
            "desc": "Tweens object's alpha.  \n`tag` - name of the tween.  \n`variable` - object to tween.  \n`color` - hex value, formatted as either `0xAARRGGBB` or `RRGGBB`.",
            "args": {
                "tag": "string",
                "variable": "string",
                "color": "string",
                "duration": "number",
                "easing": "string"
            },
            "example": "doTweenAlpha('bfAlpha', 'boyfriend', 0.5, 3, 'linear')"
        },
        "doTweenX": {
            "desc": "Tweens object's X position.  \n`tag` - name of the tween.  \n`variable` - object to tween.",
            "args": {
                "tag": "string",
                "variable": "string",
                "value": "number",
                "duration": "number",
                "easing": "string"
            },
            "example": "doTweenAlpha('bfAlpha', 'boyfriend', 0.5, 3, 'linear')"
        },
        "doTweenY": {
            "desc": "Tweens object's Y position.  \n`tag` - name of the tween.  \n`variable` - object to tween.",
            "args": {
                "tag": "string",
                "variable": "string",
                "value": "number",
                "duration": "number",
                "easing": "string"
            },
            "example": "doTweenAlpha('bfAlpha', 'boyfriend', 0.5, 3, 'linear')"
        },
        "doTweenZoom": {
            "desc": "Tweens the camera zoom.  \n`tag` - name of the tween.  \n`camera` - camera to tween.",
            "args": {
                "tag": "string",
                "camera": "string",
                "newZoom": "number",
                "duration": "number",
                "easing": "string"
            },
            "example": "doTweenAlpha('bfAlpha', 'boyfriend', 0.5, 3, 'linear')"
        },
        "endSong": {
            "desc": "Ends the song."
        },
        "exitSong": {
            "desc": "Forces the player out of the song.",
            "args": {
                "?skipTransition": "boolean = false"
            }
        },
        "flushSaveData": {
            "desc": "Saves the save.  \n<sub>pun intended</sub>",
            "args": {
                "name": "string"
            }
        },
        "getDataFromSave": {
            "desc": "Gets data field from the save file.  \nDon't forget to use `initSaveData` before trying to do anything.",
            "args": {
                "name": "string",
                "field": "string",
                "backupValue": "any"
            }
        },
        "gamepadAnalogX": {
            "desc": "Gets the gamepad's stick X axis value.  \n`id` - gamepad's id.  \n`leftStick` - whether it's left stick or not.",
            "args": {
                "id": "number",
                "?leftStick": "boolean = true"
            },
            "returns": "number"
        },
        "gamepadAnalogY": {
            "desc": "Gets the gamepad's stick Y axis value.  \n`id` - gamepad's id.  \n`leftStick` - whether it's left stick or not.",
            "args": {
                "id": "number",
                "?leftStick": "boolean = true"
            },
            "returns": "number"
        },
        "gamepadJustPressed": {
            "desc": "Tells if gamepad key just got pressed.  \n`id` - gamepad's id.  \n`key` - name of the key.",
            "args": {
                "id": "number",
                "key": "string"
            },
            "returns": "boolean"
        },
        "gamepadPressed": {
            "desc": "Tells if gamepad key is held at the moment.  \n`id` - gamepad's id.  \n`key` - name of the key.",
            "args": {
                "id": "number",
                "key": "string"
            },
            "returns": "boolean"
        },
        "gamepadReleased": {
            "desc": "Tells if gamepad key just got released.  \n`id` - gamepad's id.  \n`key` - name of the key.",
            "args": {
                "id": "number",
                "key": "string"
            },
            "returns": "boolean"
        },
        "getCharacterX": {
            "desc": "Returns the character's X position.  \n`type` - either `dad` or `gf`, defaults to boyfriend.",
            "args": {
                "type": "string"
            },
            "returns": "number"
        },
        "getCharacterY": {
            "desc": "Returns the character's Y position.  \n`type` - either `dad` or `gf`, defaults to boyfriend.",
            "args": {
                "type": "string"
            },
            "returns": "number"
        },
        "getColorFromHex": {
            "desc": "Returns the int color from hex value.",
            "args": {
                "color": "string"
            },
            "returns": "number"
        },
        "getGlobalFromScript": {
            "desc": "Returns the value from another script.  \n`lua` - the lua file.  \n`value` - the global value in that lua file.",
            "args": {
                "lua": "string",
                "value": "string"
            },
            "returns": "any"
        },
        "getGraphicMidpointX": {
            "desc": "Returns the graphic X midpoint of the sprite.",
            "args": {
                "sprite": "string"
            },
            "returns": "number"
        },
        "getGraphicMidpointY": {
            "desc": "Returns the graphic Y midpoint of the sprite.",
            "args": {
                "sprite": "string"
            },
            "returns": "number"
        },
        "getHealth": {
            "desc": "Gets the current health (value from 0 to 2).",
            "returns": "number"
        },
        "getHits": {
            "desc": "Returns the current hits value on the song.",
            "returns": "number"
        },
        "getMidpointX": {
            "desc": "Returns the X midpoint of the sprite.",
            "args": {
                "sprite": "string"
            },
            "returns": "number"
        },
        "getMidpointY": {
            "desc": "Returns the Y midpoint of the sprite.",
            "args": {
                "sprite": "string"
            },
            "returns": "number"
        },
        "getMisses": {
            "desc": "Returns the current misses value on the song.",
            "returns": "number"
        },
        "getMouseX": {
            "desc": "Returns the X position of the mouse on the specified camera.  \n`camera` - either `game`, `hud` or `other`.",
            "args": {
                "camera": "string"
            },
            "returns": "number"
        },
        "getMouseY": {
            "desc": "Returns the Y position of the mouse on the specified camera.  \n`camera` - either `game`, `hud` or `other`.",
            "args": {
                "camera": "string"
            },
            "returns": "number"
        },
        "getObjectOrder": {
            "desc": "Returns the layer position of the object.  \nUse `dadGroup`, `gfGroup` and `boyfriendGroup` to get the order of dad, gf and bf respectively.",
            "args": {
                "obj": "string"
            },
            "returns": "number"
        },
        "getPixelColor": {
            "desc": "Gets the pixel color as an int.",
            "args": {
                "obj": "string",
                "x": "number",
                "y": "number"
            },
            "returns": "number"
        },
        "getProperty": {
            "desc": "Returns the game's or object's property.",
            "args": {
                "vars": "string"
            },
            "returns": "any"
        },
        "getPropertyFromClass": {
            "desc": "Returns property of the class.",
            "args": {
                "class": "string",
                "variable": "string"
            },
            "returns": "any"
        },
        "getPropertyFromGroup": {
            "desc": "Returns the group's property.",
            "args": {
                "group": "string",
                "index": "number",
                "variable": "string"
            },
            "returns": "any"
        },
        "getRandomBool": {
            "desc": "Returns random bool value.",
            "args": {
                "chance": "number = 50"
            },
            "returns": "boolean"
        },
        "getRandomFloat": {
            "desc": "Returns random float value.  \n`exclude` - string of numbers separated by ` , `.",
            "args": {
                "min": "number",
                "max": "number = 1",
                "exclude": "string"
            },
            "returns": "number"
        },
        "getRandomInt": {
            "desc": "Returns random int value.  \n`exclude` - string of numbers separated by ` , `.",
            "args": {
                "min": "number",
                "max": "number = inf",
                "exclude": "string"
            },
            "returns": "number"
        },
        "getRunningScripts": {
            "desc": "Returns an array of all active script's directories.",
            "returns": "{string}"
        },
        "getScore": {
            "desc": "Gets the song's score in this game and returns it.",
            "returns": "number"
        },
        "getScreenPositionX": {
            "desc": "Returns the sprite's X position on the screen.",
            "returns": "{string}"
        },
        "getScreenPositionY": {
            "desc": "Returns the sprite's Y position on the screen.",
            "returns": "{string}"
        },
        "getShaderBool": {
            "desc": "Returns the object's shader bool.",
            "args": {
                "obj": "string",
                "boolName": "string"
            },
            "returns": "boolean"
        },
        "getShaderBoolArray": {
            "desc": "Returns the object's shader bool array.",
            "args": {
                "obj": "string",
                "boolName": "string"
            },
            "returns": "{boolean}"
        },
        "getShaderFloat": {
            "desc": "Returns the object's shader float.",
            "args": {
                "obj": "string",
                "floatName": "string"
            },
            "returns": "number"
        },
        "getShaderFloatArray": {
            "desc": "Returns the object's shader float array.",
            "args": {
                "obj": "string",
                "floatName": "string"
            },
            "returns": "{number}"
        },
        "getShaderInt": {
            "desc": "Returns the object's shader int.",
            "args": {
                "obj": "string",
                "intName": "string"
            },
            "returns": "number"
        },
        "getShaderIntArray": {
            "desc": "Returns the object's shader int array.",
            "args": {
                "obj": "string",
                "intName": "string"
            },
            "returns": "{number}"
        },
        "getSongPosition": {
            "desc": "Returns the current song position in milliseconds.",
            "returns": "number"
        },
        "getSoundTime": {
            "desc": "Returns the sound's time in milliseconds.",
            "args": {
                "obj": "string",
                "intName": "string"
            },
            "returns": "{number}"
        },
        "getSoundVolume": {
            "desc": "Returns the volume of the sound from 0 to 1.",
            "args": {
                "obj": "string",
                "intName": "string"
            },
            "returns": "{number}"
        },
        "getTextFont": {
            "desc": "Returns the text's font.",
            "args": {
                "obj": "string",
                "intName": "string"
            },
            "returns": "{number}"
        },
        "getTextFromFile": {
            "desc": "Returns text from file.",
            "args": {
                "path": "string",
                "?ignoreModFolders": "boolean = false"
            },
            "returns": "string"
        },
        "getTextSize": {
            "desc": "Returns the size of the text's string in pixels.",
            "args": {
                "obj": "string"
            },
            "returns": "number"
        },
        "getTextString": {
            "desc": "Returns the text's string.",
            "args": {
                "obj": "string"
            },
            "returns": "string"
        },
        "getTextWidth": {
            "desc": "Returns the text object's width.",
            "args": {
                "obj": "string"
            },
            "returns": "number"
        },
        "initLuaShader": {
            "desc": "Initializes the shader to be ready to use.  \n`shader` - name of the shader's `.frag` file.",
            "args": {
                "shader": "string"
            }
        },
        "initSaveData": {
            "desc": "Initializes (prepares) the save.",
            "args": {
                "name": "string",
                "?folder": "string = 'psychenginemods'"
            }
        },
        "isRunning": {
            "desc": "Checks if the specified lua script is active.",
            "args": {
                "luaFile": "string"
            },
            "returns": "number"
        },
        "keyJustPressed": {
            "desc": "Tells if the keybind was just pressed.  \nCheckable keybinds:  \n`left`, `down`, `up`, `right`, `space`, `accept`, `back`, `pause`, `reset`.",
            "args": {
                "key": "string"
            },
            "returns": "boolean"
        },
        "keyPressed": {
            "desc": "Tells if the keybind is held.  \nCheckable keybinds:  \n`left`, `down`, `up`, `right`, `space`, `accept`, `back`, `pause`, `reset`.",
            "args": {
                "lua": "string"
            },
            "returns": "boolean"
        },
        "keyReleased": {
            "desc": "Tells if the keybind was just released.  \nCheckable keybinds:  \n`left`, `down`, `up`, `right`, `space`, `accept`, `back`, `pause`, `reset`.",
            "args": {
                "lua": "string"
            },
            "returns": "boolean"
        },
        "keyboardJustPressed": {
            "desc": "Tells if the keyboard key was just pressed.  \nYou can get key names from [here](https://api.haxeflixel.com/flixel/input/keyboard/FlxKey.html).",
            "args": {
                "key": "string"
            },
            "returns": "boolean"
        },
        "keyboardPressed": {
            "desc": "Tells if the keyboard key is held.  \nYou can get key names from [here](https://api.haxeflixel.com/flixel/input/keyboard/FlxKey.html).",
            "args": {
                "lua": "string"
            },
            "returns": "boolean"
        },
        "keyboardReleased": {
            "desc": "Tells if the keyboard key was just released.  \nYou can get key names from [here](https://api.haxeflixel.com/flixel/input/keyboard/FlxKey.html).",
            "args": {
                "lua": "string"
            },
            "returns": "boolean"
        },
        "loadFrames": {
            "desc": "Loads frames into sprite.  \n`spr` - sprite to load frames into.  \n`img` - path to the image.  \n`type` - type of the spritesheet. Spritesheet types:  \n`texture`, `textureatlas`, `tex`;  \n`texture_noaa`, `textureatlas_noaa`, `tex_noaa`;  \n`packer`, `packeratlas`, `pac`;  \nDefaults to `sparrow`.",
            "args": {
                "spr": "string",
                "img": "string",
                "type": "string = 'sparrow'"
            }
        },
        "loadGraphic": {
            "desc": "Loads image into sprite.  \n`spr` - sprite to load image into.  \n`img` - path to the image.  \n`width` and `height` - size of the frame grid. Don't set unless animated.",
            "args": {
                "spr": "string",
                "img": "string",
                "width": "number = 0",
                "height": "number = 0"
            }
        },
        "loadSong": {
            "desc": "Tells the game to load into the song.  \n`name` - the song's name. Defaults to the current song.  \n`diffNum` - difficulty index. Defaults to -1 (current difficulty).",
            "args": {
                "?name": "string = nil",
                "?diffNum": "number = -1"
            }
        },
        "luaSoundExists": {
            "desc": "Checks if any sound with the specified tag exists.",
            "args": {
                "tag": "string"
            },
            "returns": "boolean"
        },
        "luaSpriteExists": {
            "desc": "Checks if any sprite with the specified tag exists.",
            "args": {
                "tag": "string"
            },
            "returns": "boolean"
        },
        "luaTextExists": {
            "desc": "Checks if any text object with the specified tag exists.",
            "args": {
                "tag": "string"
            },
            "returns": "boolean"
        },
        "makeAnimatedLuaSprite": {
            "desc": "Makes an animated sprite with the given tag, image and position.  \nIf sprite with that tag already exists, it gets replaced.  \n`image` - path to the image like `bg-stuff/goober`.  \n`type` - spritesheet data type:  \n`texture`, `textureatlas`, `tex`;  \n`texture_noaa`, `textureatlas_noaa`, `tex_noaa`;  \n`packer`, `packeratlas`, `pac`;  \nDefaults to `sparrow`.",
            "args": {
                "tag": "string",
                "image": "string = ''",
                "x": "number = 0",
                "y": "number = 0",
                "?type": "string = 'sparrow'"
            },
            "example": "makeLuaSprite('ng logo', 'newgrounds_logo', 459, 185)"
        },
        "makeGraphic": {
            "desc": "Makes a graphic for the sprite.  \n`tag` - sprite's tag.  \n`width`, `height` - size of the rectangle.  \n`color` - hex color like `0xAARRGGBB` or `RRGGBB`.",
            "args": {
                "tag": "string",
                "width": "number",
                "height": "number",
                "color": "string"
            },
            "example": "makeLuaSprite('ng logo', 'newgrounds_logo', 459, 185)"
        },
        "makeLuaSprite": {
            "desc": "Makes a sprite with the given tag, image and position.  \nIf sprite with that tag already exists, it gets replaced.  \n`image` - path to the image like `bg-stuff/goober`. Leave empty and use **makeGraphic** function if you want to make a rectangle filled with solid color.",
            "args": {
                "tag": "string",
                "image": "string = ''",
                "x": "number = 0",
                "y": "number = 0"
            },
            "example": "makeLuaSprite('ng logo', 'newgrounds_logo', 459, 185)"
        },
        "makeLuaText": {
            "desc": "Creates a label with the given tag, text and position.  \nIf text with that tag already exists, it gets replaced.  \n`width` - text field's width. Setting to 0 makes it dynamic but text cant be aligned.",
            "args": {
                "tag": "string",
                "text": "string",
                "width": "number",
                "x": "number",
                "y": "number"
            },
            "example": "makeLuaText('silly', 'Very silly text', 300, 24, screenHeight - 48)"
        },
        "mouseClicked": {
            "desc": "Tells if mouse button just got pressed.  \n`btn` - `middle` or `right`, defaults to left.",
            "args": {
                "btn": "string"
            },
            "returns": "boolean"
        },
        "mousePressed": {
            "desc": "Tells if mouse button is held at the moment.  \n`btn` - `middle` or `right`, defaults to left.",
            "args": {
                "btn": "string"
            },
            "returns": "boolean"
        },
        "mouseReleased": {
            "desc": "Tells if mouse button just got released.  \n`btn` - `middle` or `right`, defaults to left.",
            "args": {
                "btn": "string"
            },
            "returns": "boolean"
        },
        "noteTweenAlpha": {
            "desc": "Tweens the strum's alpha.  \n`tag` - name of the tween.  \n`note` - index of the strum.  \n0, 1, 2, 3 - opponent.  \n4, 5, 6, 7 - player.",
            "args": {
                "tag": "string",
                "note": "number",
                "value": "number",
                "duration": "number",
                "easing": "string"
            }
        },
        "noteTweenAngle": {
            "desc": "Tweens the strum's angle.  \n`tag` - name of the tween.  \n`note` - index of the strum.  \n0, 1, 2, 3 - opponent.  \n4, 5, 6, 7 - player.",
            "args": {
                "tag": "string",
                "note": "number",
                "value": "number",
                "duration": "number",
                "easing": "string"
            }
        },
        "noteTweenDirection": {
            "desc": "Tweens the direction from which notes come from.  \n`tag` - name of the tween.  \n`note` - index of the strum.  \n0, 1, 2, 3 - opponent.  \n4, 5, 6, 7 - player.",
            "args": {
                "tag": "string",
                "note": "number",
                "value": "number",
                "duration": "number",
                "easing": "string"
            }
        },
        "noteTweenX": {
            "desc": "Tweens the strum's X position.  \n`tag` - name of the tween.  \n`note` - index of the strum to move.  \n0, 1, 2, 3 - opponent.  \n4, 5, 6, 7 - player.  \nDon't forget to use `defaultPlayerStrumX_` or `defaultOpponentStrumX_`, where `_` is the strum index.",
            "args": {
                "tag": "string",
                "note": "number",
                "value": "number",
                "duration": "number",
                "easing": "string"
            }
        },
        "noteTweenY": {
            "desc": "Tweens the strum's Y position.  \n`tag` - name of the tween.  \n`note` - index of the strum.  \n0, 1, 2, 3 - opponent.  \n4, 5, 6, 7 - player.  \nDon't forget to use `defaultPlayerStrumY_` or `defaultOpponentStrumY_`, where `_` is the strum index.",
            "args": {
                "tag": "string",
                "note": "number",
                "value": "number",
                "duration": "number",
                "easing": "string"
            }
        },
        "objectsOverlap": {
            "desc": "Checks if two objects overlap.",
            "args": {
                "obj1": "string",
                "obj2": "string"
            }
        },
        "openCustomSubstate": {
            "desc": "Opens a custom substate with the given name and calls onCustomSubstateCreate(name) function.",
            "args": {
                "name": "string",
                "pause": "boolean = false"
            }
        },
        "pauseSound": {
            "desc": "Pauses the any sound with the specified tag.",
            "args": {
                "tag": "string"
            }
        },
        "playAnim": {
            "desc": "Plays animation on the sprite.  \n`obj` - name of the sprite object.  \n`name` - name of the animation.  \n`forced` - restarts the animation even if it already plays.  \n`reverse` - plays the animation frames in reverse order.  \n`startFrame` - the frame that animation is going to start from.",
            "args": {
                "obj": "string",
                "name": "string",
                "?forced": "boolean = false",
                "?reverse": "boolean = false",
                "?startFrame": "number = 0"
            }
        },
        "playMusic": {
            "desc": "Plays specified music from the `music/` folder.",
            "args": {
                "name": "string",
                "?volume": "number = 1",
                "?loop": "boolean = false"
            }
        },
        "playSound": {
            "desc": "Plays specified sound from the `sounds/` folder.  \n`tag` - name for the sound to use in functions like `pauseSound(tag)`.",
            "args": {
                "name": "string",
                "?volume": "number = 1",
                "?tag": "string"
            }
        },
        "precacheImage": {
            "desc": "Loads image into memory so game doesn't lag if it tries to load it for the first time.",
            "args": {
                "imgPath": "string"
            }
        },
        "precacheMusic": {
            "desc": "Loads music into memory so game doesn't lag if it tries to load it for the first time.",
            "args": {
                "musicPath": "string"
            }
        },
        "precacheSound": {
            "desc": "Loads sound into memory so game doesn't lag if it tries to load it for the first time.",
            "args": {
                "soundPath": "string"
            }
        },
        "removeFromGroup": {
            "desc": "Removes object from the group.  \n`dontDestroy` - keeps object alive in case it's referenced somewhere else.",
            "args": {
                "obj": "string",
                "index": "number",
                "dontDestroy": "boolean = false"
            }
        },
        "removeLuaScript": {
            "desc": "Removes lua script from execution thread.",
            "args": {
                "luaFile": "string"
            }
        },
        "removeLuaSprite": {
            "desc": "Removes sprite with the specified tag.  \n`destroy` - destroys the sprite so it can't be reused and cleans up taken memory.",
            "args": {
                "tag": "string",
                "?destroy": "boolean = true"
            }
        },
        "removeLuaText": {
            "desc": "Removes text with the specified tag.",
            "args": {
                "tag": "string",
                "?destroy": "boolean = true"
            }
        },
        "removeSpriteShader": {
            "desc": "Removes the shaders applied to the sprite.",
            "args": {
                "obj": "string"
            },
            "returns": "boolean"
        },
        "restartSong": {
            "desc": "Restarts the song.",
            "args": {
                "?skipTransition": "boolean = false"
            }
        },
        "resumeSound": {
            "desc": "Resumes the sound's playback.",
            "args": {
                "tag": "string"
            }
        },
        "runHaxeCode": {
            "desc": "Executes haxe code string.  \nUse `[[double square brackets]]` for multiline text.  \n`return variableHere;` is useful to get the result.",
            "args": {
                "code": "string"
            },
            "returns": "any"
        },
        "runTimer": {
            "desc": "Creates a timer with specified tag, time and loops.  \n`loops` - how many times the timer should run. 0 is infinite, defaults to 1.",
            "args": {
                "tag": "string",
                "?time": "number = 1",
                "?loops": "number = 1"
            }
        },
        "saveFile": {
            "desc": "Saves `content` into file under `path`.  \n`absolute` - makes path start from the root directory of the operating system instead of the mods folder.",
            "args": {
                "path": "string",
                "content": "string",
                "absolute": "boolean = false"
            }
        },
        "scaleObject": {
            "desc": "Sets the object's size multiplier (scales the object, duh).",
            "args": {
                "obj": "string",
                "x": "number",
                "y": "number",
                "?updateHitbox": "boolean = true"
            }
        },
        "screenCenter": {
            "desc": "Centers the object to the screen.",
            "args": {
                "x": "number",
                "y": "number"
            }
        },
        "setBlendMode": {
            "desc": "Sets the object's blend mode.  \nList of the blend modes:  ``, ``, ``, ``, ``, ``, ``, ``, ``, ``, ``, ``, ``, ``, ``, ``, ``, ``, ``.",
            "args": {
                "x": "number",
                "y": "number"
            }
        },
        "setCharacterX": {
            "desc": "Sets the X position of the character's group.  \n`char` - either `dad` or `gf`, defaults to boyfriend.",
            "args": {
                "char": "string",
                "x": "number"
            }
        },
        "setCharacterY": {
            "desc": "Sets the Y position of the character's group.  \n`char` - either `dad` or `gf`, defaults to boyfriend.",
            "args": {
                "char": "string",
                "y": "number"
            }
        },
        "setDataFromSave": {
            "desc": "Sets data field in the save file.  \nUse `flushSaveData` to save fields.  \nDon't forget to use `initSaveData` before trying to do anything.",
            "args": {
                "name": "string",
                "field": "string",
                "value": "any"
            }
        },
        "setGlobalFromScript": {
            "desc": "Sets the value in another script.  \n`lua` - the lua file.  \n`field` - the global variable in that lua file.",
            "args": {
                "lua": "string",
                "field": "string",
                "value": "any"
            }
        },
        "setGraphicSize": {
            "desc": "Sets the object's size in pixels.",
            "args": {
                "obj": "string",
                "width": "number",
                "height": "number",
                "?updateHitbox": "boolean = true"
            }
        },
        "setHealth": {
            "desc": "Sets the health.  \n`val` - value from 0 to 2.",
            "args": {
                "val": "number = 0"
            }
        },
        "setHealthBarColors": {
            "desc": "Sets the HP Bar's colors.  \n `left` - hex color for the opponent.  \n`right` - hex color for the player.  \nHEX color format can be either `0xAARRGGBB` or `RRGGBB`.",
            "args": {
                "left": "string",
                "right": "string"
            }
        },
        "setHits": {
            "desc": "Sets the hits counter to the new value and recalculates the rating.",
            "args": {
                "hits": "number"
            }
        },
        "setMisses": {
            "desc": "Sets the misses counter to the new value and recalculates the rating.",
            "args": {
                "misses": "number"
            }
        },
        "setObjectCamera": {
            "desc": "Moves object to the specified camera.  \n`camera` - either `game`, `hud` or `other`. Defaults to `game`.",
            "args": {
                "obj": "string",
                "camera": "string = ''"
            }
        },
        "setObjectOrder": {
            "desc": "Sets the layer position of the object.  \nAlso check `getObjectOrder` function.",
            "args": {
                "obj": "string",
                "pos": "number"
            }
        },
        "setProperty": {
            "desc": "Sets the game's property.",
            "args": {
                "var": "string",
                "value": "any"
            }
        },
        "setPropertyFromClass": {
            "desc": "Sets the property of the class.",
            "args": {
                "class": "string",
                "var": "string",
                "value": "any"
            }
        },
        "setPropertyFromGroup": {
            "desc": "Sets the property of the class.",
            "args": {
                "group": "string",
                "index": "number",
                "var": "string",
                "value": "any"
            }
        },
        "setRatingFC": {
            "desc": "Sets the FC text (Rating: Rating Name (Perc%) **FC Text**).",
            "args": {
                "text": "string"
            }
        },
        "setRatingName": {
            "desc": "Sets the rating text (Rating: **Rating Name** (Perc%) FC Text).",
            "args": {
                "text": "string"
            }
        },
        "setRatingPercent": {
            "desc": "Sets the accuracy value from 0 to 1 (Rating: Rating Name (**Perc%**) FC Text).",
            "args": {
                "val": "number"
            }
        },
        "setScore": {
            "desc": "Sets the score and recalculates the rating.",
            "args": {
                "score": "number"
            }
        },
        "setScrollFactor": {
            "desc": "Sets the object's scroll factor.  \n` 0 ` - stays in place, ` 1 ` - follows the camera.",
            "args": {
                "obj": "string",
                "x": "number",
                "y": "number"
            }
        },
        "updateHitbox": {
            "desc": "Updates the hitbox of the object.",
            "args": {
                "obj": "string"
            }
        },
        "updateHitboxFromGroup": {
            "desc": "Updates the hitbox of the object in the group.",
            "args": {
                "group": "string",
                "index": "number"
            }
        }
    },
    "snippets": {
        "For-Notes Loop": "for i = 0, getProperty('notes.length') - 1 do\n\t$0\nend",
        "For-UnspawnNotes Loop": "for i = 0, getProperty('unspawnNotes.length') - 1 do\n\t$0\nend",
        "Skip Notes Fade": "setProperty('skipArrowStartTween', true)",
        "Skip Countdown": "setProperty('skipCountdown', true)",
        "Disable Auto-Pause": "setPropertyFromClass('flixel.FlxG', 'autoPause', false) -- Don't forget to turn it back on with onDestroy callback",
        "function lerp(start, end, time)": "function lerp(s, e, t)\n\treturn s + (e - s) * math.min(t, 1)\nend"
    }
}